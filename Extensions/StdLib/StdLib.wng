#def #suggest(code => out)
	if !$Compiler.IsSuggestion
		return dim
	$MacroHelp.UnindentAll(code)
	return code

#def #if(code => out)
	if !$Compiler.Eval(code[0])
		return dim
	code[0] : ""
	$MacroHelp.UnindentAll(code)
	return code
	
#def #guard(code => code)
	if !$Compiler.IsDebug
		return dim
	$MacroHelp.UnindentAll(code)
	code[0] : "if !(" + code[0] + ") \ $Debug.Break()"
	return code
	
#def #mock(code => out)
	if !$Compiler.IsSuggestion & !$Compiler.IsIDE
		return dim
	$MacroHelp.UnindentAll(code)
	return code


library IO
	extern ::Write(text)
	extern ::Log(var)
	extern ::DebugLog(obj)
		
library Obj
	extern ::.NextKey(?key => key)
	extern ::.PrevKey(?key => key)
	extern ::.Count(=> count)
	extern ::.Keys(=> keyList)
	extern ::.ShallowCopy(=> dup)
	extern ::.HasChildren(=> bool)
		
library Set
	extern ::.Has(key => exists)
		
library List
	extern ::.Add(elem => ref)
	extern ::.Contains(elem => bool)
	extern ::.Any(lamb => bool)
	extern ::.RemoveAll(where)

library Stack
	extern ::.Push(value => ref)
	extern ::.Pop( => obj)
		
library Queue
	extern ::.Enqueue(val)
	extern ::.Dequeue(=> val)
	extern ::New(=> obj)

library Str
	extern ::.Replace(toRemove, ?replace => clean)
	extern ::.Piece(delim, ?pc => sub)
	extern ::.SubStr(start, ?len => sub)
	extern ::.Len(=> len)
	extern ::.Contains(search => bool)
	extern ::.Split(delim => arr)
	extern ::.ToUpper(=> upper) // uses locale rules
	extern ::.ToLower(=> lower) // uses locale rules
	extern ::.Trim(=> trimmed) // strip all white space from begining and end
	
library Math
	extern ::Mod(value, div => mod)
	extern ::Div(value, div => result)
	extern ::Floor(val => val)
	extern ::Ceiling(val => val)
	extern ::Round(float => int)
	extern ::RoundToNearest(float, near => val)
	extern ::RoundToNearestFloat(float, near => val)
	extern ::Atan2(y, x => rad)

library Scratch
	extern ::Alloc(=> obj)
	extern ::Free(obj)
	extern ::Hoist(&obj => obj)
		
library Job
	extern ::.Wait(=> async)
	extern ::.IsComplete(=> complete)
	extern ::Yield(=> async)
	extern ::Pause(ms => async)

library Promise
	extern ::Create(=> id)
	extern ::.Wait(=> async)
	extern ::.Resolve()
			
// only available for macros
library Compiler
	extern $IsTest : false
	extern $IsDebug : false
	extern $IsSuggestion : false
	extern $IsIDE : false
	extern $IsBootstrap : false
	extern ::GetFileLine(=> line)
	extern ::GetFileName(=> name)
	extern ::Eval(code => eval)
	
// only available for macros
library MacroHelp
	extern ::UnindentAll(codeArr)
	extern ::Unindent(code => code)
	extern ::Escape(str => clean)

library Debug
	extern ::Break()
	extern ::ObjDebug(obj => str)
	extern ::TypeName(obj => str)
			

// Methods that don't really need to be mocked, but make sense for completeness
library List
	::New( => list) => dim
		
library Set
	::New( => set) => dim
	::.Add(key)
		this[key] : true
		
library Stack
	::New( => stack) => dim

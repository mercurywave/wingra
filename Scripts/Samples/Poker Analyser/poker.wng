
using Util

data Suits : dim
    "♥"; "♦"; "♣"; "♠"

data Cards : dim
    "a"; "2"; "3"; "4"; "5"; "6"; "7"; "8"; "9"; "10"; "j"; "q"; "k";


global ::Main()
    @stats : dim()
    for 0 to 100
        $Deal(stats)
    $IO.Write("")
    for @cnt of stats at @type
        $IO.Write(type + ": " + ~cnt)


::Deal(stats)
    using List
    @deck : $BuildDeck()
    deck.$Shuffle()
    @hand : dim()
    for 0 to 5
        hand.$Add(deck[it])
    @result : $Analyze(hand)
    stats.$IncrementCount(result)
    $IO.Write(hand.$Map(`it.Card + it.Suit`).$Join(" ") + "  " + result)


::BuildDeck(=> deck)
    deck : dim()
    for @suit : $Suits
        for @card : $Cards
            deck.$List.Add(dim)
                Suit : suit
                Card : card


::Analyze(hand => result)
    // create a map of each suit to the number of cards of that suit
    @suits : hand.$List.FrequencyMap(`it.Suit`)
    // same, but for card face values
    @nums : hand.$List.FrequencyMap(`it.Card`)
    return switch
        $RoyalFlush(suits, nums) : "Royal Flush"
        $StraightFlush(suits, nums) : "Straight Flush"
        $FourOfAKind(nums) : "Four of a kind"
        $FullHouse(nums) : "Full House"
        $Flush(suits) : "Flush"
        $Straight(nums) : "Straight"
        $ThreeOfAKind(nums) : "Three of a kind"
        $TwoPair(nums) : "Two Pair"
        $OnePair(nums) : "Pair"
        else : "High Card"


::RoyalFlush(suits,nums => bool)
    // if it's a straight flush that involves the ace, but not the 2
    => $StraightFlush(suits,nums) & nums.$Set.Has($Cards[0]) & !nums.$Set.Has($Cards[1])

::StraightFlush(suits, nums => bool)
    => $Flush(suits) & $Straight(nums)

::FourOfAKind(nums => bool)
    => nums.$List.Any(`it = 4`)
    
::FullHouse(nums => bool)
    // we want the frequency of the frequency, for number of ones, pairs, triples, etc
    @freq : nums.$List.FrequencyMap(`it`)[2]
    return freq[2] = 1 & freq[3] = 1

::Flush(suits => bool)
    => suits.$Obj.Count() = 1

::Straight(nums => bool)
    @counts : dim()
    for @face of $Cards at @idx
        @cnt : nums[face]
        cnt ?: 0
        counts[idx] : ~cnt
    @series : counts.$List.Join()
    series : series + series
    return series.$Str.Contains("11111")

::ThreeOfAKind(nums => bool)
    => nums.$List.Any(`it = 3`)

::TwoPair(nums => bool)
    => nums.$List.FrequencyMap(`it`)[2] = 2

::OnePair(nums => bool)
    => nums.$List.Any(`it = 2`)


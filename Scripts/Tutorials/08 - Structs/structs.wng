
// structs are a common building block that are used for many things
// each struct stores multiple pieces of data, and can represent many different data types
// the simplest way to create a struct is with the dim keyword
@a : dim()

// this creates a blank struct, and we can then use it to store other things
a["key"] : "value"
$IO.Write(a["key"]) // prints "value"
// struct keys can be numbers, strings, or other value-type variables
// struct values can contain any variable

// one common pattern is to create an ordered list of elements
// you can accomplish that by passing in the elements that will form the list
@b : dim("a", "b", "c")
// this initializes 'b' like so:
//   b[0] = "a"
//   b[1] = "b"
//   b[2] = "c"

// alternatively, you can define a list within the scope of the line
@c : dim
    "a"
    "b"
    "c"
// that created a struct with the same structure as the previous example

// you could use this in conjuntcion with the ';' line break symbol to do the same thing more compactly
@d : dim
    "a"; "b"; "c"


// another common type of struct is a dictionary of string keys to variables
// these can be useful to conceptually represent objects
@e : dim // this is equivilent to how we initialized 'a' above
    "key" : "value"

@f : dim // this is also equivilent, literal one-word keys without "" like this are assumed to act like strings
    key : "value"
// this is similar to how you can access that node of the struct
$IO.Write(f.key) // prints "value"

// you can also declare a struct like this inline like this
@g : dim(key: "value")


// in the Wingra language, the dim keyword is one of a handful of scope inverters
// these are symbols that read the child scope of a line (the lines of code indented below)
// you can use this keyword as part of a larger expression, while having space to define the contents
@h : $IO.Write(~(dim).$List.Contains("a"))  //prints true
    "a"; "b"; "c" // this list of elements is part of the dim

// note: you cannot use a scope inverter with a statement that also has a child scope
//if (dim)[0] // this is invalid because it's ambiguous which keyword the child scope belongs to
// and you cannot use multiple scope inverters on the same line for the same reason
//@a : dim; @b : dim // ambiguous


// you can also pair the 'dim' keyword with a function call
// this allows you to take a struct returned by the function and add additional data
@i : dim $Monster("Wolf") // creates a Foo struct, and then adds a "HP" value
    HP : 3

::Monster(name => obj)
    return dim
        name : name

// with this style of struct creation, you can use a property function to compose a more complicated struct
@j : dim $Monster("Ogre") // this grabs the output struct created by the monster function
    mixin $mixAttacker(3) // this applies the mixAttacker function to that struct

::.mixAttacker(dmg)
    this.attacks : true
    this.damage : dmg


// you can use the 'has' keyword to check if a struct has a fixed key
@k : dim("duck" : 4)
$IO.Write(~(k has "duck")) // prints true

// one-word values are treated like a string, similar to how k.duck accesses the node
$IO.Write(~(k has duck)) // prints true

// note, that means 'has' does not evaluate the right side like a variable
@someVar : "duck"
$IO.Write(~(k has someVar)) // prints false - there is no k["someVar"]

// if you want to check whether a struct has a variable key, you can use $Set.Has()
$IO.Write(~k.$Set.Has(someVar)) // prints true


// there are a number of other functions in the standard library to help work with structs
// some expect that you have a struct of a certain format of keys/values
// these may error or behave erratically given data that doesn't conform

// you can get a list of the keys of a struct
@m : dim("a" : "value")
@n : m.$Obj.Keys() // creates a new struct where n[0] : "a"

// $List functions work with structs that use numeric keys in the format that dim(a,b,c) can make
@o : dim("a", "b", "c")
o.$List.Add("d") // adds to the end, so o[3] : "d"
$IO.Write(~o.$List.Contains("c")) // prints true

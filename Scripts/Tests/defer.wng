
::Foo( => a)
	@a : false
	defer \ a : true

#test
	$assert($Foo())
	
::Bar( => a)
	// if we returned a value type variable, this wouldn't work the same way
	// currently, the return expressions are run and locked in prior to defer running
	// it seems handy to be able to return a child node of an object before it's cleaned up
	// can't of a reasonable example where the defer should occur prior to the return expressions running
	@a : dim()
	for 1 to 5
		if it = 4
			return a
		if it = 3
			a.out : false
		if it = 2
			defer a.out : true
	
#test
	$assert($Bar().out)
	
#test
	@a : dim(false)
	// can't use a local because capture doesn't write back
	$(lambda)
		defer \ a[0] : true
		a[0] : false
	$assert(a[0])
	
#test
	@a : dim(false)
	// can't use a local because capture doesn't write back
	$(lambda)
		defer \ a[0] : true
		a[0] : false
		if !a[0]
			quit
		a[0] : false
	$assert(a[0])
	
::Throws(fail, doDefer => throw)
	defer \ $(doDefer)
	if fail
		throw
		
#test
	trap $Throws(true, `$assert(true)`)
